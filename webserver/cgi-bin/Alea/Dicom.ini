#
# This file contains configuration information for the conquest cgi web server;
# it must be in the same directory as the dgate.exe in the web server script directory.
# For wamp: dgate.exe runs if it is put in C:\wamp\Apache2\cgi-bin
# The server home page is then "http://127.0.0.1/cgi-bin/dgate.exe?mode=top"
# The cgi interface has been tested with wamp5, dgate4.12d, and ie6sp1
#
# modified 20070213: default to n4, note about ocx only required on client
# modified 20080902: webreadonly ON; graphics and viewer configs; sample scripted web pages
# modified 20101121: Added wadoservers section
# modified 20120213: Added SQLServer, SqLite (enables lua dbquery and sql, see sample3)
# modified 20120213: Added ACRNemaMap, Dictionay (enables lua dicomquery, see sample3)
# modified 20120219: Organized the general samples, ecrf, soap and json
# modified 20130528: Added new viewers, OpenCLinica; For 1.4.17 release
# modified 20130813: small fixes For 1.4.17b release

[sscscp]
MicroPACS                = sscscp

Tempdir                  = c:\temp

# database layout (copy dicom.sql to the web server script directory or point to the one in your dicom server directory)

kFactorFile              = c:\dicomserver\dicom.sql
TruncateFieldNames       = 10

# gives access to the SQL server of the DICOM server
# use of independent database is also allowed (depends on scripts used)

SQLServer                = c:\dicomserver\data\dbase\conquest.db3
SQlite                   = 1

# gives access to all DICOM servers known in acrnema.map

ACRNemaMap               = C:\dicomserver\acrnema.map
Dictionary               = C:\dicomserver\dgate.dic

# default IP address and port of DICOM server (may be non-local, web pages empty if wrong)

WebServerFor             = 127.0.0.1
TCPPort                  = 5678

# AE title: only used if web client originates queries or moves

MyACRNema		 = CONQUESTSRV1

# path to script engine: ocx will not download images if wrong - shows as black square with controls
# for wamp: dgate.exe runs if it is put in C:\wamp\Apache2\cgi-bin

WebScriptAddress         = http://127.0.0.1/cgi-bin/dgate.exe

# web or local location of ActiveFormProj1.ocx for download (include trailing / or \)
# the activeX control will not download if wrong or security too high - shows as white square with red x
# note: it only needs to be registered by the client, not the server!
# for wamp: the ocx canNOT be in C:\wamp\Apache2\cgi-bin, I put it in c:\wamp\www (above cgi-bin)
# - the default value is derived from WebScriptAddress

#WebCodeBase              = http://127.0.0.1/


# if set to 1 (default), the web user cannot edit databases and (in future) other things
# webpush enables push of data to other servers

WebReadonly              = 0
WebPush                  = 1

# this is an optional virtual directory used to http: all images from mag0
# this entry is experimental and unused except for viewer=seriesviewer2
# in this mode (only) ocx will not download images if wrong - shows as black square with 
# controls - the default value is derived from WebScriptAddress

#WebMAG0Address           = http://127.0.0.1/mag0

# excerpt from C:\wamp\Apache2\conf\httpd.conf required for WebMAG0Address (un-# there)
# or use the wamp traybar menu to create the alias

#Alias /mag0/ "c:/dicomserver/data/" 
#
#<Directory "c:/dicomserver/data">
#    Options Indexes MultiViews
#    AllowOverride None
#    Order allow,deny
#    Allow from all
#</Directory>

# these settings control size of slice and series viewers, max size of transmitted dicom images 
# (0=original), compression for images sent to the activex (may be un,n1..4,j1,j2), the size of 
# the icons in the image list, the image type used for icons and slice display, and the dgate 
# mode containing the viewer (may be seriesviewer, seriesviewer2, noviewer, serversideviewer, 
# or aiviewer - java code of the latter not included with 1.4.14).
# note: all items require at least one space left and right of the '=' !

[webdefaults]
size     = 560
dsize    = 0
compress = un
iconsize = 48
graphic  = gif
viewer   = serversideviewer
studyviewer =

# enter address (up to not including the ?) of the WADO server for each DICOM AE listed
# the sample (for AE TESTWADOSRV) comes from the DICOM standard and is not valid
# the default is the local conquest server (which could use virtualservers as WADO bridge)
# These WADO entries are used in 'list .... on ....'

[wadoservers]
TESTWADOSRV = http://www.hospital-stmarco/radiology/wado.php

# Here are scripted series viewers: ImageJA, dwv, flexviewer (=aiviewer), weasis
# And one scripted study viewer: studyweasis

[imagejaviewer]
source   = viewers\imagejaviewer.cq

[dwv]
source = viewers\dwv.lua

[flexviewer]
source = viewers\flexviewer.lua

[weasis]
source = viewers\LaunchWeasis.cq
header = Content-Type: application/x-java-jnlp-file\

# The scripted study viewer: studyweasis

[studyweasis]
source = viewers\LaunchWeasisStudy.cq
header = Content-Type: application/x-java-jnlp-file\


# These entries enable the OpenClinica - Conquest interface

# default
[DefaultPage]
source = *.lua

[OpenClinica]

Source=(local)
TargetServer=user@server.domain:
password=xxxxx

# Below here are all samples with no clear functionality

# Here are some sample web pages to show how scripting works
# this creates web page http://xxxxx/cgi-bin/dgate.exe?mode=sample

[sample]
variable = sample 1
source   = samples\sample.cq

# this creates web page http://xxxxx/cgi-bin/dgate.exe?mode=sample2
# This sample posts a file
# Note: in the header parameter newline is written as \

[sample2]
variable = sample 2
header= Content-type: text/html\Cache-Control: no-cache\
line0 = <HEAD><TITLE>Conquest DICOM server - %variable%</TITLE></HEAD>
line1 = <BODY BGCOLOR='CFDFCF'>
line2 = <H2>Conquest DICOM server - %query_string%</H2>
line3 = <FORM ACTION="dgate.exe" METHOD=POST ENCTYPE="multipart/form-data">
line4 = <INPUT NAME=mode    TYPE=HIDDEN VALUE=soaprequest>
line5 = <INPUT NAME=port    TYPE=HIDDEN VALUE=5678>
line6 = <INPUT NAME=address TYPE=HIDDEN VALUE=127.0.0.1>
line7 = Upload file to enter into server (dcm/v2/HL7/zip/7z/gz/tar): <INPUT NAME=filetoupload SIZE=40 TYPE=file VALUE=>
line8 = <INPUT TYPE=SUBMIT VALUE=Go>
line9 = </FORM>
line10 = </BODY>

# this creates a web page scripted in lua http://xxxxx/cgi-bin/dgate.exe?mode=sample3

#[sample3]
#source = samples\sample3.lua

# these entries create an experimental SOAP interface scripted in lua

[wsdl]
source = soap\wsdl.xml
header = Content-type: text/xml\

[soaprequest]
source = soap\soaprequest.lua

# these entries create an experimental JSON interface scripted in lua

[sample4]
source = json\json_sample.html
header = Content-type: text/html\Cache-Control: no-cache\

[jsonrequest]
source = json\jsonrequest.lua

# these entries create a simple eCRF interface
# ..?mode=studyfinder&dest=CONQUESTSRV1&key=afc0501:baseline&query==2040XXXX

# creates SQL database and enters information
[markstudy]
source = ecrf\markstudyseries.lua
caption= Select for submission

[markseries]
source = ecrf\markstudyseries.lua
caption= Select for submission

# show SQL database and selects processing
[shoppingcart]
source = ecrf\shoppingcart.lua
caption= Process selected data

# process information
[ecrfprocess]
source = ecrf\ecrfprocess.lua

# new query form
[queryforecrf]
source = ecrf\queryforecrf.lua

[Alea]
Source=PACSAE
TargetServer=curl -k -T %s https://www.tenalea.com/pacsupload/
